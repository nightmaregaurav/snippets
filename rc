# needed for later use
rm -f ~/.extip
touch ~/.extip

# function to set ext ip in a file
function set_public_ip_to_extip_file() {
  local addr=$( timeout 3 dig +short myip.opendns.com @resolver1.opendns.com || \
    timeout 3 curl -s http://whatismyip.akamai.com/ || \
    timeout 3 curl -s http://ifconfig.io/ip || \
    timeout 3 curl -s http://ipecho.net/plain || \
    timeout 3 curl -s http://ident.me/
  )
  [ $? -ne 0 ] && addr="0.0.0.0"
  echo $addr > ~/.extip
}
(set_public_ip_to_extip_file &) > /dev/null 2>&1

# Get public IP address
alias publicip='cat ~/.extip'

if [[ $BASH_VERSION == "" ]]; then
  isbash="false"
  iszsh="true"
elif [[ $ZSH_VERSION == "" ]]; then
  isbash="true"
  iszsh="false"
else
  return
fi;

# Don't put duplicate lines in the history and do not add lines that start with a space
export HISTCONTROL=erasedups:ignorespace

# Causes bash to append to history instead of overwriting it so if you start a new terminal, you have old session history
[[ $isbash == "true" ]] && shopt -s histappend
PROMPT_COMMAND='history -a'

# Don't consider certain characters part of the word
WORDCHARS=${WORDCHARS//\/}

# hide EOL sign ('%')
PROMPT_EOL_MARK=""

# Expand the history size
export HISTFILE=~/.history
export HISTFILESIZE=10000
export HISTSIZE=2000

# alias to show the date
alias da='date "+%Y-%m-%d %A %T %Z"'

# Show open ports
alias openports='netstat -nape --inet'

# To use sudo on aliases
alias sudo='sudo '

# Get CPU usage
if [ -f ~/.local/bin/virtualenvwrapper.sh ]; then
  alias cpu="grep 'cpu ' /proc/stat | awk '{usage=(\$2+\$4)*100/(\$2+\$4+\$5)} END {print usage}' | awk '{printf(\"%.1f\n\", \$1)}'"
else
  alias cpu="echo NA"
fi

# Configure `time` format
TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S\ncpu\t%P'

# Get free port after a port
function freeportafter
{
  blank=$(echo " " | tr -d ' ' | tr -d '  ' | tr -d '\n');
  port=$*;

  if [[ "$port" == "$blank" ]]; then
    port=5000;
  fi;

  myarray=($(lsof -i -P -n | grep LISTEN | awk '{print $9}' | awk -F: '{print $NF}' | awk '$1 >= '"$port"' {print $1}' | sort -un));

  for i in "${myarray[@]}"
  do
    if [[ $i == $port ]]; then
      port=$((port+1));
    else
      break;
    fi;
  done;

  echo $port;
}

function recurse-run
{
  blank=$(echo " " | tr -d ' ' | tr -d '  ' | tr -d '\n');

  initial_command="$*";
  if [[ "$initial_command" != "$blank" ]]; then
    echo "Executing initial command as you asked [$initial_command]";
    $initial_command;
  fi;

  echo "You are currently in $(pwd)";
  echo "Enter command to run in all dirs >>> "
  read x;
  cmd=$(echo $x | sed 's/^[\t]*//g');
  echo "";

  for i in ./*;
  do
    if [[ -d $i ]]; then
      cd "$i";
      echo "************************************";
      echo "Running command for $i";
      echo "************************************";
      echo "$($cmd 2>&1)";
      cd ..;
    fi;
  done;
}

#######################################################
#          Set the amazing command prompt             #
#######################################################
function __setprompt
{
  # refresh IP
  (set_public_ip_to_extip_file &) > /dev/null 2>&1

  local LAST_COMMAND=$? # Must come first!
  local NEWLINE=$'\n'

  PS1=""
  PS2=""
  PS3=""
  PS4=""

  # Define colors and other variables
  if [[ $isbash == "true" ]]; then
    local RED="\[\033[0;31m\]"
    local GREEN="\[\033[0;32m\]"
    local YELLOW="\[\033[0;33m\]"
    local BLUE="\[\033[0;34m\]"
    local MAGENTA="\[\033[0;35m\]"
    local CYAN="\[\033[0;36m\]"
    local NOCOLOR="\[\033[0m\]"
    local BOLD="\[\033[1m\]"

    local PERCENTAGE="%"
    local HOSTNAME="\h"
    local CWD="\w"
    local USERNAME="\u"
  fi
  if [[ $iszsh == "true" ]]; then
    local RED="%F{red}"
    local GREEN="%F{green}"
    local YELLOW="%F{yellow}"
    local BLUE="%F{blue}"
    local MAGENTA="%F{magenta}"
    local CYAN="%F{cyan}"
    local NOCOLOR="%b%f%F{reset}"
    local BOLD="%B"

    local PERCENTAGE="%%"
    local HOSTNAME="%M"
    local CWD="%~"
    local USERNAME="%n"
  fi

  # set color only when we know we can use color
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    local color_prompt=yes
  else
    local color_prompt=
  fi

  # unset color and style codes if we don't want colors
  if ! [ "$color_prompt" = yes ]; then
    local RED=""
    local GREEN=""
    local YELLOW=""
    local BLUE=""
    local MAGENTA=""
    local CYAN=""
    local NOCOLOR=""
    local BOLD=""
  fi

  # Show error exit code if there is one
  if [[ $LAST_COMMAND != 0 ]]; then
    PS1+="${NOCOLOR}(${RED}${BOLD}ERROR${NOCOLOR})-(${RED}${BOLD}Exit Code ${NOCOLOR}${LAST_COMMAND}${NOCOLOR})-(${RED}${BOLD}"
    if [[ $LAST_COMMAND == 1 ]]; then
      PS1+="General error"
    elif [ $LAST_COMMAND == 2 ]; then
      PS1+="Missing keyword, command, or permission problem"
    elif [ $LAST_COMMAND == 126 ]; then
      PS1+="Permission problem or command is not an executable"
    elif [ $LAST_COMMAND == 127 ]; then
      PS1+="Command not found"
    elif [ $LAST_COMMAND == 128 ]; then
      PS1+="Invalid argument to exit"
    elif [ $LAST_COMMAND == 129 ]; then
      PS1+="Fatal error signal 1"
    elif [ $LAST_COMMAND == 130 ]; then
      PS1+="Script terminated by Control-C"
    elif [ $LAST_COMMAND == 131 ]; then
      PS1+="Fatal error signal 3"
    elif [ $LAST_COMMAND == 132 ]; then
      PS1+="Fatal error signal 4"
    elif [ $LAST_COMMAND == 133 ]; then
      PS1+="Fatal error signal 5"
    elif [ $LAST_COMMAND == 134 ]; then
      PS1+="Fatal error signal 6"
    elif [ $LAST_COMMAND == 135 ]; then
      PS1+="Fatal error signal 7"
    elif [ $LAST_COMMAND == 136 ]; then
      PS1+="Fatal error signal 8"
    elif [ $LAST_COMMAND == 137 ]; then
      PS1+="Fatal error signal 9"
    elif [ $LAST_COMMAND -gt 255 ]; then
      PS1+="Exit status out of range"
    else
      PS1+="Unknown error code"
    fi
    PS1+=")${NOCOLOR}${NEWLINE}"
  else
    PS1+=""
  fi

  # Date
  PS1+="${NOCOLOR}(${CYAN}${BOLD}$(date +%a) $(date +%b-'%-m')" # Date
  PS1+="${BLUE}${BOLD} $(date +'%-I':%M%P)${NOCOLOR})-" # Time

  # CPU
  PS1+="(${MAGENTA}${BOLD}CPU $(cpu)${PERCENTAGE}${NOCOLOR})-"

  # hostname
  PS1+="(${YELLOW}${BOLD}${HOSTNAME}"

  # Current directory
  PS1+="${NOCOLOR}:${YELLOW}${CWD}${NOCOLOR})"

  # Current Global IP
  IP=$(publicip)
  if [[ "$IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    PS1+="-(${RED}${BOLD}${IP}${NOCOLOR})"
  fi

  # Skip to the next line
  PS1+="${NEWLINE}"

  if [[ $EUID -ne 0 ]]; then
    PS1+="${NOCOLOR}(${GREEN}${BOLD}${USERNAME}${NOCOLOR}) ${YELLOW}${BOLD}$(git rev-parse --abbrev-ref HEAD 2> /dev/null)${NOCOLOR}${GREEN} >>>${NOCOLOR} " # Normal user
  else
    PS1+="${NOCOLOR}(${RED}${BOLD}${USERNAME}${NOCOLOR}) ${YELLOW}${BOLD}$(git rev-parse --abbrev-ref HEAD 2> /dev/null)${NOCOLOR}${RED} >>>${NOCOLOR} " # Root user
  fi

  # Add python virtual env name if available
  if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT}" ] ; then
    env_name=$(basename "$VIRTUAL_ENV")
    if ! [ -z "${env_name}" ] ; then
      PS1="[${env_name}]-${PS1}"
    fi
  fi

  # PS2 is used to continue a command using the \ character

  PS2+="${GREEN} >>>${NOCOLOR} "

  # PS3 is used to enter a number choice in a script
  PS3+="${GREEN} Enter a number from the list above:${NOCOLOR} "

  # PS4 is used for tracing a script in debug mode
  PS4+="${GREEN}+${NOCOLOR} "
}

PROMPT_COMMAND='__setprompt'
precmd_functions=(__setprompt)

export WORKON_HOME="$HOME/.virtualenvs"
export PROJECT_HOME="$HOME/Projects"
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  . /usr/local/bin/virtualenvwrapper.sh
fi
if [ -f ~/.local/bin/virtualenvwrapper.sh ]; then
  . ~/.local/bin/virtualenvwrapper.sh
fi
