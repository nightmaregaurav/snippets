#!/bin/bash

# Defaults
blank=$(echo " " | tr -d ' ' | tr -d '	' | tr -d '\n');
ISMAINSERVER="NO";
SOURCE="/home/crystal/src/erp/";
PROJECTPATH="crystal.erp/Crystal.Erp/Crystal.Erp.csproj";
SERVICESAMPLE="/home/crystal/service.sample";
APACHESAMPLE="/home/crystal/apache-setup.sample";
APPFOLDER="publish";
CREATESERVER="NO";
LAUNCHERP="NO";
UPGRADEERP="NO";

# Parse Arguments
while [ $# -gt 0 ]; do
  case $1 in
    -s|--setup)
      SETUP="$2"
      shift # past argument
      shift # past value
      ;;
    -c|--create)
      CREATESERVER="YES"
      shift # past argument
      ;;
    -l|--launch)
      LAUNCHERP="YES"
      shift # past argument
      ;;
    -u|--upgrade)
      UPGRADEERP="YES"
      shift # past argument
      ;;
    -h|--help)
      echo "SetupErp Tool By Gaurav Nyaupane Â©CrystalSolution"
      echo "Flags:"
      echo "    -s|--setup : Setup file containing information of server to work on."
      echo "    -c|--create : Create virtual server."
      echo "    -l|--launch : Launch fresh ERP system."
      echo "    -u|--upgrade : Upgrade ERP to latest version"
      echo "    -h|--help : Display this message"
      exit 0
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      echo "Unknown argument $1"
      exit 1
      ;;
  esac
done

# Args Validation
if [[ "$SETUP" == "$blank" ]]; then
	echo "ARG ERR: Setup File path is required.";
	exit 1;
fi;
if [[ "$CREATESERVER" == "NO" && "$LAUNCHERP" == "NO" && "$UPGRADEERP" == "NO" ]]; then
	echo "ARG ERR: Atleast one of -c -l -u flag must be used.";
	exit 1;
fi;
if [[ "$LAUNCHERP" == "YES" && "$UPGRADEERP" == "YES" ]]; then
	echo "ARG ERR: -l and -u flag cannot be used together.";
	exit 1;
fi;
if [[ "$CREATESERVER" == "YES" && "$UPGRADEERP" == "YES" ]]; then
	echo "ARG ERR: -c and -u flag cannot be used together.";
	exit 1;
fi;
if [ ! -f "$SETUP" ]; then
  echo "ARG ERR: Specified setup file does not exists.";
  exit 1;
fi;

# Sourcing setup file
. $SETUP;

# Validation of setup keys
if [[ "$ISMAINSERVER" == "$blank" ]]; then
	echo "CONFIG ERR: MainServer Indentifier ISMAINSERVER is required.";
	exit 1;
fi;
if [[ "$USERNAME" == "$blank" ]]; then
	echo "CONFIG ERR: Username Indentifier USERNAME is required.";
	exit 1;
fi;
if [[ "$PASSWORD" == "$blank" ]]; then
	echo "CONFIG ERR: Password Indentifier PASSWORD is required.";
	exit 1;
fi;
if [[ "$DOMAIN" == "$blank" ]]; then
	echo "CONFIG ERR: Domain Indentifier DOMAIN is required.";
	exit 1;
fi;
if [[ "$DESCRIPTION" == "$blank" ]]; then
	echo "CONFIG ERR: Description Indentifier DESCRIPTION is required.";
	exit 1;
fi;
if [[ "$DB" == "$blank" ]]; then
	echo "CONFIG ERR: Database name Indentifier DB is required.";
	exit 1;
fi;
if [[ "$PORT" == "$blank" ]]; then
	echo "CONFIG ERR: Port Indentifier PORT is required.";
	exit 1;
fi;
if [[ "$APPFOLDER" == "$blank" ]]; then
	echo "CONFIG ERR: AppFolder Indentifier APPFOLDER is required.";
	exit 1;
fi;
if [[ "$DOTNET" == "$blank" ]]; then
	echo "CONFIG ERR: DotNet version Indentifier DOTNET is required.";
	exit 1;
fi;
if [[ "$SOURCE" == "$blank" ]]; then
	echo "CONFIG ERR: Source folder path Indentifier SOURCE is required.";
	exit 1;
fi;
if [[ "$PROJECTPATH" == "$blank" ]]; then
	echo "CONFIG ERR: Project path Indentifier PROJECTPATH is required.";
	exit 1;
fi;
ROOT="/home/$USERNAME";
if [[ "$MAINSERVER" != "YES" ]]; then
	if [[ "$PARENT" == "$blank" ]]; then
		echo "CONFIG ERR: Parent domain Indentifier PARENT is required for subserver.";
		exit 1;
	fi;
	
	if [[ "$DOMAIN" != *"$PARENT" ]]; then
  		DOMAIN="$DOMAIN.$PARENT";
	fi;

	ROOT="$ROOT/domains/$DOMAIN";
fi;
if [[ "$SERVICE" == "$blank" ]]; then
	SERVICE="$PORT.$DOMAIN.service";
fi;

# Info
echo "ISMAINSERVER => $ISMAINSERVER";
echo "USERNAME => $USERNAME";
echo "PASSWORD => $PASSWORD";
echo "DOMAIN => $DOMAIN";
echo "PARENT => $PARENT";
echo "DESCRIPTION => $DESCRIPTION";
echo "DB => $DB";
echo "PORT => $PORT";
echo "APPFOLDER => $APPFOLDER";
echo "DOTNET => $DOTNET";
echo "SERVICE => $SERVICE";
echo "ROOT => $ROOT";
echo "SOURCE => $SOURCE";
echo "PROJECTPATH => $PROJECTPATH";

# Creation of Virtual Server
if [[ "$CREATESERVER" == "YES" ]]; then
	if [[ "$MAINSERVER" != "YES" ]]; then
		COMMAND=$(echo virtualmin create-domain --domain $DOMAIN --parent $PARENT --db $DB --dir --web --dns --mail --ssl --mysql --spam --virtualmin-awstats --virtualmin-dav --webalizer);
	else
		COMMAND=$(echo virtualmin create-domain --domain $DOMAIN --parent $PARENT --db $DB --dir --web --dns --mail --ssl --mysql --spam --virtualmin-awstats --virtualmin-dav --webalizer --webmin --unix --user $USERNAME --pass $PASSWORD);
	fi;
	
  $COMMAND;
    
	# Systemd service setup
	cp "$SERVICESAMPLE" "/tmp/$SERVICE";
	sed -i "s|{{DESC}}|$DESCRIPTION|g" "/tmp/$SERVICE";
	sed -i "s|{{ROOT}}|$ROOT|g" "/tmp/$SERVICE";
	sed -i "s|{{APPFOLDER}}|$APPFOLDER|g" "/tmp/$SERVICE";
	sed -i "s|{{PORT}}|$PORT|g" "/tmp/$SERVICE";
	sed -i "s|{{SERVICENAME}}|$SERVICE|g" "/tmp/$SERVICE";
	sed -i "s|{{USERNAME}}|$USERNAME|g" "/tmp/$SERVICE";
	mv "/tmp/$SERVICE" /lib/systemd/system/;
  systemctl daemon-reload;

	# Apache server setup
	cp "$APACHESAMPLE" /tmp/apache-setup.sample;
	sed -i "s|{{PORT}}|$PORT|g" /tmp/apache-setup.sample;
	mv /tmp/apache-setup.sample "$ROOT";
fi;

if [[ "$LAUNCHERP" == "YES" || "$UPGRADEERP" == "YES" ]]; then
	# Validation of arguments
	if [ ! -d "$SOURCE" ]; then
	  echo "Directory [$SOURCE] DOES NOT EXISTS.";
	  exit 1;
	fi;
	if [ ! -f "$SOURCE/$PROJECTPATH" ]; then
	  echo "Project [$SOURCE/$PROJECTPATH] DOES NOT EXISTS.";
	  exit 1;
	fi;
	if [ ! -d "$ROOT" ]; then
	  echo "Domain root [$ROOT] DOES NOT EXISTS.";
	  exit 1;
	fi;
	service=$(systemctl list-unit-files --all -t service --full --no-legend "$SERVICE" | sed 's/^\s*//g' | cut -f1 -d' ');
	if [[ "$service" != "$SERVICE" ]]; then
	  echo "Service [$SERVICE] DOES NOT EXISTS.";
	  exit 1;
	fi;
	if ! (id "$USERNAME" >/dev/null 2>&1); then
	  echo "User [$USERNAME] DOES NOT EXISTS.";
	  exit 1;
	fi;

	BACKUPFOLDER="$(echo $APPFOLDER)_$(date "+%F-%H-%M-%S")";

	# Actual Launch/Upgrade Work
	echo "************************************";
	echo "Going inside source dir...";
	echo "************************************";
	cd "$SOURCE";

	echo "************************************";
	echo "Pulling Latest of all repos...";
	echo "************************************";
	run-recursive-silently git pull;

	if [[ "$UPGRADEERP" == "YES" ]]; then
		echo "************************************";
		echo "Backing up Previous Build...";
		echo "************************************";
	fi;
	cd "$ROOT";
	mv "$APPFOLDER" "$BACKUPFOLDER" 2>/dev/null || :;


	echo "************************************";
	echo "Building the solution...";
	echo "************************************";
	cd "$SOURCE";
	rm -rf /tmp/setup-erp-publish 2>/dev/null || :;
	dotnet publish "$PROJECTPATH" -c release -r linux-x64 -f $DOTNET -o /tmp/setup-erp-publish --nologo;

	echo "************************************";
	echo "Moving published system to target...";
	echo "************************************";
	cd "$ROOT";
	mv "/tmp/setup-erp-publish" "$APPFOLDER";

	echo "************************************";
	echo "Setting up configuration files...";
	echo "************************************";
	if [[ "$UPGRADEERP" == "YES" ]]; then
		cp "$BACKUPFOLDER/appsettings.json" "$APPFOLDER/" 2>/dev/null || :;
		cp "$BACKUPFOLDER/hibernate.cfg.xml" "$APPFOLDER/" 2>/dev/null || :;
		cp "$BACKUPFOLDER/License.xml" "$APPFOLDER/" 2>/dev/null || :;
		cp -r "$BACKUPFOLDER/wwwroot" "$APPFOLDER" 2>/dev/null || :;
	fi;
	if [[ "$LAUNCHERP" == "YES" ]]; then
		cd "$APPFOLDER";
		sed -i "s|{{DBNAME}}|$DB|g" appsettings.json 2>/dev/null || :;
		sed -i "s|{{DBUSER}}|$USERNAME|g" appsettings.json 2>/dev/null || :;
		sed -i "s|{{DBPASS}}|$PASSWORD|g" appsettings.json 2>/dev/null || :;
		sed -i "s|{{DBNAME}}|$DB|g" hibernate.cfg.xml 2>/dev/null || :;
		sed -i "s|{{DBUSER}}|$USERNAME|g" hibernate.cfg.xml 2>/dev/null || :;
		sed -i "s|{{DBPASS}}|$PASSWORD|g" hibernate.cfg.xml 2>/dev/null || :;
    cd "$ROOT";
	fi;	

	echo "************************************";
	echo "Changing Permission of app folder...";
	echo "************************************";
	chown -R $USERNAME:$USERNAME "$APPFOLDER";

	echo "************************************";
	echo "Restarting Service...";
	echo "************************************";
	systemctl restart $SERVICE;

	echo "************************************";
	echo "DONE!!!";
	echo "************************************";
fi;